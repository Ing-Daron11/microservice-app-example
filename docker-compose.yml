services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: microapp-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - microapp-network
    volumes:
      - redis_data:/data

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: microapp-zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped
    environment:
      - STORAGE_TYPE=mem
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microapp-network

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================

  users-api:
    build: 
      context: ./users-api
      dockerfile: Dockerfile
    container_name: microapp-users-api
    ports:
      - "8083:8083"
    environment:
      - SERVER_PORT=8083
      - JWT_SECRET=myfancysecret
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411/
      - SPRING_SLEUTH_SAMPLER_PERCENTAGE=100.0
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:testdb
      - SPRING_H2_CONSOLE_ENABLED=true
    restart: unless-stopped
    depends_on:
      zipkin:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/users/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - microapp-network

  auth-api:
    build: 
      context: ./auth-api
      dockerfile: Dockerfile 
    container_name: microapp-auth-api
    ports:
      - "8081:8081"
    environment:
      - AUTH_API_PORT=8081
      - JWT_SECRET=myfancysecret
      - USERS_API_ADDRESS=http://users-api:8083
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
    depends_on:
      users-api:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microapp-network

  todos-api:
    build: 
      context: ./todos-api
      dockerfile: Dockerfile
    container_name: microapp-todos-api
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=production
      - TODO_API_PORT=8082
      - JWT_SECRET=myfancysecret
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CHANNEL=log_channel
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
    depends_on:
      redis:
        condition: service_healthy
      auth-api:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microapp-network

  # =============================================================================
  # PROCESSING SERVICES
  # =============================================================================

  log-message-processor:
    build: 
      context: ./log-message-processor
      dockerfile: Dockerfile
    container_name: microapp-log-processor
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CHANNEL=log_channel
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microapp-network

  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: microapp-frontend
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
    depends_on:
      auth-api:
        condition: service_healthy
      todos-api:
        condition: service_healthy
      users-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - microapp-network

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================

networks:
  microapp-network:
    driver: bridge
    name: microapp-network

volumes:
  redis_data:
    driver: local