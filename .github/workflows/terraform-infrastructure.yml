name: Terraform Infrastructure

on:
  push:
    branches: [master]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply

env:
  TF_VERSION: "1.5.0"
  RESOURCE_GROUP: "rg-microapp-dev-student"

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ./terraform/environments/${{ inputs.environment || 'dev' }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ env.RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ inputs.environment || 'dev' }}.terraform.tfstate"

    - name: Terraform Validate
      working-directory: ./terraform/environments/${{ inputs.environment || 'dev' }}
      run: terraform validate

    - name: Import existing resources
      working-directory: ./terraform/environments/${{ inputs.environment || 'dev' }}
      run: |
        # Import existing resources if they exist and aren't in state
        echo "Importing existing resources..."
        
        # Resource Group
        terraform import module.resource_group.azurerm_resource_group.main \
          /subscriptions/270b4efe-9ebd-44f7-ab7e-a468a5d58e77/resourceGroups/${{ env.RESOURCE_GROUP }} || true
        
        # Virtual Network
        terraform import module.networking.azurerm_virtual_network.main \
          /subscriptions/270b4efe-9ebd-44f7-ab7e-a468a5d58e77/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/microapp-dev-vnet || true
        
        # Network Security Groups
        terraform import 'module.networking.azurerm_network_security_group.microservices["auth-api"]' \
          /subscriptions/270b4efe-9ebd-44f7-ab7e-a468a5d58e77/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/networkSecurityGroups/microapp-dev-auth-api-nsg || true
        
        terraform import 'module.networking.azurerm_network_security_group.microservices["users-api"]' \
          /subscriptions/270b4efe-9ebd-44f7-ab7e-a468a5d58e77/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/networkSecurityGroups/microapp-dev-users-api-nsg || true
        
        terraform import 'module.networking.azurerm_network_security_group.microservices["todos-api"]' \
          /subscriptions/270b4efe-9ebd-44f7-ab7e-a468a5d58e77/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/networkSecurityGroups/microapp-dev-todos-api-nsg || true
        
        terraform import 'module.networking.azurerm_network_security_group.microservices["frontend"]' \
          /subscriptions/270b4efe-9ebd-44f7-ab7e-a468a5d58e77/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/networkSecurityGroups/microapp-dev-frontend-nsg || true
        
        terraform import 'module.networking.azurerm_network_security_group.microservices["shared-services"]' \
          /subscriptions/270b4efe-9ebd-44f7-ab7e-a468a5d58e77/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/networkSecurityGroups/microapp-dev-shared-services-nsg || true
        
        # Container Registry (the real one)
        terraform import module.acr.azurerm_container_registry.main \
          /subscriptions/270b4efe-9ebd-44f7-ab7e-a468a5d58e77/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/microappdevacryckctn || true
        
        echo "Import completed!"
      continue-on-error: true

    - name: Terraform Plan
      working-directory: ./terraform/environments/${{ inputs.environment || 'dev' }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: ${{ inputs.action == 'apply' || inputs.action == '' }}
      working-directory: ./terraform/environments/${{ inputs.environment || 'dev' }}
      run: terraform apply -auto-approve tfplan

  update-container-apps:
    runs-on: ubuntu-latest
    needs: terraform
    if: needs.terraform.result == 'success' && (inputs.action == 'apply' || inputs.action == '')
    
    strategy:
      matrix:
        service: [auth-api, users-api, todos-api, frontend]
        
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Update Container App
      run: |
        az containerapp update \
          --name microapp-${{ inputs.environment || 'dev' }}-${{ matrix.service }}-ca \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image microappdevacryckctn.azurecr.io/${{ matrix.service }}:latest